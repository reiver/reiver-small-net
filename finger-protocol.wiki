wiki/1

§ Finger-Protocol

⸺ by Charles Iliya Krempeaux

The **finger-protocol** is a simple, friendly, human-oriented & human-legible protocol, that has its origins in the early 1970s.

Although some of the usage of the finger-protocol was similar to a directory-service for humans — it evolved into one of the early Internet-based **social networks**.

(One should note that online social networks existed on other pre-Internet networks.
So, while the finger-protocol wasn't the first online social network — it is important because of just how important the Internet became.)

It was not uncommon for people to use **finger** to publish:

• personal information,
• contact information,
• references to that person's presence on other parts of the Internet,
• a short biography,
• a journal,
• articles,
• jokes,
• (so called) ASCII art (which could contain non-ASCII characters),
• animations,
• //and more//.

Like with a lot of things from the early Internet — the **finger-protocol** is decentralized.

The finger-protocol was created and evolved over time, by the software developers who created the finger-client software, and the finger-server software (as well as the user who chose to use or not use a particular implementation).
Later on — at least 6 years after the finger-protocol was first created, IETF RFC-742 was published, in an attempt to describe the pre-existing finger-protocol.
I.e., IETF RDC-742 did not create a new protocol, but instead just tried to document and describe what was created by software developers outside of the IETF.
14 years later after RFC-742 was published, and at least 20 years after the finger-protocol first existed and was evolving — RFC-1288 was published in an attempt to remove some of (what some perceived as) the ambiguity of RFC-742, to make it easier for both people who would implement a finger-protocol client or server, and to provide some guidance.
However RFC-1288 added restrictions to the finger-protocol that did NOT exist in RFC-742.
In 1991 some of these restrictions may have seemed reasonable, however today (in 2022) some of the restrictions probably do not make as much sense (and should probably be reconsidered).
This document is in part an attempt to reconsider one of these restrictions that RFC-1288 introduced but which didn't exist in RFC-742 — in particular, how to handle a switch other than the "/W" switch.

Historically people and even machines were identified by user names at a host name. For example:

``cikrempeaux@reiver.link``

Someone could request information //from// or //about// a **user** at a **host** using one of the historic ``finger`` terminal applications.
On the command-line, a simple finger request could be performed with something like the following:

``finger cikrempeaux@reiver.link``

A finger-protocol server could return anything it wanted.
But the spirit of the finger-protocol is that the output should be **human-legible** first, given what technologies are available at the time (and //programmer-legible// & //machine-legible// second if at all).

Also, being a simple protocol, made creating a simple client often trivial for many.
For example:

``echo '/W cikrempeaux' | nc reiver.link 79``

§§ Small-Net

Nowadays (as the year 2022), the **finger-protocol** is considered a [[small-net]] protocol.

§§ Finger-Protocol Advantages

The **finger-protocol** has a number of advantages:

• the **finger-protocol** is a [[human-legible]] protocol (rather than just a programmer-legible or machine-legible protocol),
• the **finger-protocol** is **simple enough** for even a more //junior// software developer to be able to understand it,
• the **finger-protocol** and its //default// data-format are simple enough for a competent software developer to be able to create a (simple) working client as a weekend project,
• the **finger-protocol** is simple enough for a competent software developer to be able to create a (simple) working server as a weekend project,
• all of a (single) user's content is provided as a **single download**,
• a client could make a request from a server for a user who is //not// (necessarily) local to that server,
• key-value pairs are in a format that is **human-legible**, **programmer-legible**, and **machine-legible**.

§§ Finger-Protocol Disadvantges

The **finger-protocol** also has a number of disadvantages:

• when a client receives a response from a server, it does not know whether it received all the data or not, as, for example, the network connection could have been disconnected prematurely, but there is no way to detect this,
• there is no //tamper detection//,
• there is no way to determine whether the finger (``.plan``) file was actually from the user whose content was requested,
• there is no way to choose privacy,
• the entire finger (``.plan``) file must be download each time, even if the exact same finger (``.plan``) file was previously downloaded,
• identity is strictly tied to an Internet domain,
• there is no official way of segmenting the download (into sub-pages).
